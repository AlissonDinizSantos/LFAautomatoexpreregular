pip install gTTS
# Oi! Vamos come√ßar importando as ferramentas (bibliotecas) que a gente vai precisar.
# O 'graphviz' pra desenhar nosso aut√¥mato.
# O 'gradio' pra criar a interface web super f√°cil.
# O 'gtts' (Google Text-to-Speech) pra fazer a m√°gica da voz.
# E o 'os', que √© uma biblioteca padr√£o do Python, √∫til para interagir com o sistema operacional.
import graphviz
import gradio as gr
from gtts import gTTS
import os

#------------------------------------------------------------------------------------
# ESTRUTURA DO AUT√îMATO
#------------------------------------------------------------------------------------

# Essa classe aqui √© como se fosse um "tijolinho" do nosso aut√¥mato.
# Cada 'Estado' √© uma bolinha no nosso desenho.
# Ele tem um 'id' √∫nico pra gente n√£o se perder e um dicion√°rio de 'transicoes'
# pra saber pra onde ele pode ir com cada s√≠mbolo.
class Estado:
    _id_counter = 0

    def __init__(self):
        self.id = Estado._id_counter
        Estado._id_counter += 1
        self.transicoes = {}

    def adicionar_transicao(self, simbolo, estado):
        if simbolo not in self.transicoes:
            self.transicoes[simbolo] = []
        self.transicoes[simbolo].append(estado)

# Pensa nisso aqui como um "mini-aut√¥mato" ou um "peda√ßo de constru√ß√£o".
# √â um bloco que tem um estado de 'inicio' e um de 'fim' bem definidos.
# A gente vai usar isso pra montar o aut√¥mato final, como se fosse um Lego.
class Fragmento:
    def __init__(self, inicio, fim):
        self.inicio = inicio
        self.fim = fim

#------------------------------------------------------------------------------------
# L√ìGICA DE CONVERS√ÉO E CONSTRU√á√ÉO
#------------------------------------------------------------------------------------

# Essa fun√ß√£o √© um pouco mais te√≥rica, mas a ideia √© simples:
# ela pega a express√£o que a gente escreve (ex: "(a|b)*abb") e a reorganiza
# para um formato que o computador consegue processar de forma mais l√≥gica,
# chamado de nota√ß√£o "p√≥s-fixa".
# Ela tamb√©m √© super esperta e adiciona o operador de concatena√ß√£o (o ".")
# automaticamente onde ele est√° impl√≠cito (ex: "ab" vira "a.b").
def para_posfixa(expressao):
    precedencia = {'*': 3, '.': 2, '|': 1}
    saida = []
    pilha = []
    anterior = None

    def eh_literal(c):
        return c not in {'*', '|', '.', '(', ')'}

    for c in expressao:
        if eh_literal(c):
            if anterior and (eh_literal(anterior) or anterior in {')', '*'}):
                while pilha and precedencia.get('.', 0) <= precedencia.get(pilha[-1], 0):
                    saida.append(pilha.pop())
                pilha.append('.')
            saida.append(c)
        elif c == '(':
            if anterior and (eh_literal(anterior) or anterior in {')', '*'}):
                while pilha and precedencia.get('.', 0) <= precedencia.get(pilha[-1], 0):
                    saida.append(pilha.pop())
                pilha.append('.')
            pilha.append(c)
        elif c == ')':
            while pilha and pilha[-1] != '(':
                saida.append(pilha.pop())
            pilha.pop()
        else:
            while pilha and precedencia.get(c, 0) <= precedencia.get(pilha[-1], 0):
                saida.append(pilha.pop())
            pilha.append(c)
        anterior = c

    while pilha:
        saida.append(pilha.pop())
    return saida

# Aqui √© onde a m√°gica principal acontece! üß†
# Essa √© a implementa√ß√£o do famoso Algoritmo de Thompson.
# A gente l√™ a express√£o j√° em p√≥s-fixo e, para cada letra ou operador,
# a gente constr√≥i um pedacinho do aut√¥mato usando nossos 'Fragmentos'.
# √â como montar uma maquete, pe√ßa por pe√ßa.
def thompson(posfixa):
    pilha = []
    passos = [] # Aqui a gente guarda o passo a passo pra mostrar pro usu√°rio.
    for token in posfixa:
        if token == '*': # Se for o asterisco (fecho de Kleene)
            frag = pilha.pop()
            inicio, fim = Estado(), Estado()
            inicio.adicionar_transicao('Œµ', frag.inicio)
            inicio.adicionar_transicao('Œµ', fim)
            frag.fim.adicionar_transicao('Œµ', frag.inicio)
            frag.fim.adicionar_transicao('Œµ', fim)
            pilha.append(Fragmento(inicio, fim))
            passos.append(f"Operador '*': Criado la√ßo com in√≠cio {inicio.id} e fim {fim.id}.")
        elif token == '.': # Se for o ponto (concatena√ß√£o)
            frag2, frag1 = pilha.pop(), pilha.pop()
            frag1.fim.adicionar_transicao('Œµ', frag2.inicio)
            pilha.append(Fragmento(frag1.inicio, frag2.fim))
            passos.append(f"Operador '.': Concatenado fim {frag1.fim.id} com in√≠cio {frag2.inicio.id}.")
        elif token == '|': # Se for a barra (uni√£o/ou)
            frag2, frag1 = pilha.pop(), pilha.pop()
            inicio, fim = Estado(), Estado()
            inicio.adicionar_transicao('Œµ', frag1.inicio)
            inicio.adicionar_transicao('Œµ', frag2.inicio)
            frag1.fim.adicionar_transicao('Œµ', fim)
            frag2.fim.adicionar_transicao('Œµ', fim)
            pilha.append(Fragmento(inicio, fim))
            passos.append(f"Operador '|': Uni√£o com novo in√≠cio {inicio.id} e fim {fim.id}.")
        else: # Se for uma letra ou n√∫mero (literal)
            inicio, fim = Estado(), Estado()
            inicio.adicionar_transicao(token, fim)
            pilha.append(Fragmento(inicio, fim))
            passos.append(f"S√≠mbolo '{token}': Transi√ß√£o direta de {inicio.id} -> {fim.id}.")
    return pilha.pop(), passos

# Depois que o aut√¥mato est√° pronto, essa fun√ß√£o entra em a√ß√£o pra desenhar ele
# bonitinho pra gente usando o Graphviz. üé®
# Ela visita cada estado, desenha as bolinhas e as setas, e marca o estado inicial
# com uma seta e o final com um c√≠rculo duplo.
def desenhar_afn(estado_inicial, estado_final):
    dot = graphviz.Digraph(format='png')
    visitados = set()
    def visitar(estado):
        if estado.id in visitados: return
        visitados.add(estado.id)
        forma = 'doublecircle' if estado == estado_final else 'circle'
        dot.node(str(estado.id), shape=forma)
        for simbolo, estados in estado.transicoes.items():
            for s in estados:
                dot.edge(str(estado.id), str(s.id), label=simbolo)
                visitar(s)
    dot.node('', shape='point')
    dot.edge('', str(estado_inicial.id))
    visitar(estado_inicial)
    return dot.render('nfa_thompson', view=False)

# Essa fun√ß√£o √© o nosso "testador". Ela pega a palavra que o usu√°rio digitou
# e tenta "caminhar" pelo aut√¥mato seguindo as transi√ß√µes. Se ela conseguir
# chegar no estado final depois de ler a palavra toda, a palavra √© 'ACEITA'! ‚ú®
def simular_afn(inicio, fim, palavra):
    def dfs(atual, i, visitados):
        if (atual.id, i) in visitados: return False
        visitados.add((atual.id, i))
        if i == len(palavra):
            if atual == fim: return True
            for proximo in atual.transicoes.get('Œµ', []):
                if dfs(proximo, i, visitados): return True
        else:
            for proximo in atual.transicoes.get(palavra[i], []):
                if dfs(proximo, i + 1, visitados): return True
            for proximo in atual.transicoes.get('Œµ', []):
                if dfs(proximo, i, visitados): return True
        return False
    return dfs(inicio, 0, set())

#------------------------------------------------------------------------------------
# FUN√á√ïES DE INTERFACE (liga√ß√£o entre a l√≥gica e a tela)
#------------------------------------------------------------------------------------

# Essa √© a fun√ß√£o "maestra" que rege a orquestra quando a gente clica no bot√£o principal. üé∂
# Ela chama todas as outras fun√ß√µes na ordem certa: converte pra p√≥s-fixo,
# constr√≥i com Thompson, desenha o grafo, simula a palavra e at√© gera o √°udio de an√∫ncio.
def gerar_automato_interface(expressao, palavra):
    if not expressao:
        return "Erro: express√£o vazia!", None, [], None

    Estado._id_counter = 0
    try:
        posfixa = para_posfixa(expressao)
        fragmento, passos = thompson(posfixa)
        caminho_imagem = desenhar_afn(fragmento.inicio, fragmento.fim)

        texto_falado = "Gr√°fico gerado: Aut√¥mato Finito N√£o-determin√≠stico"
        tts = gTTS(text=texto_falado, lang='pt-br')
        caminho_audio = "anuncio_automato.mp3"
        tts.save(caminho_audio)

        if palavra.strip() == "":
            resultado = "Digite uma palavra para testar."
        else:
            aceita = simular_afn(fragmento.inicio, fragmento.fim, palavra)
            resultado = f"Resultado: {'ACEITA' if aceita else 'REJEITA'}"

        return resultado, caminho_imagem, "\n".join(passos), caminho_audio
    except Exception as e:
        return f"Erro: {e}", None, [], None

# Essa √© a fun√ß√£o que a gente fez pra dar as sugest√µes pro usu√°rio.
# Ela √© chamada quando a gente clica no bot√£o de sugest√£o.
def dar_sugestoes_por_voz():
    sugestoes = [
        "(a|b)*abb",
        "a*b*c*",
        "(0|1)+",
        "inicio(meio)*fim"
    ]
    texto_falado = "Ol√°! Aqui est√£o algumas sugest√µes para voc√™ testar. Tente: "
    texto_falado += ". Ou ent√£o: ".join(sugestoes)
    texto_para_exibir = "Experimente uma destas:\n\n" + "\n".join(sugestoes)
    tts = gTTS(text=texto_falado, lang='pt-br')
    caminho_audio_sugestoes = "sugestoes.mp3"
    tts.save(caminho_audio_sugestoes)
    return caminho_audio_sugestoes, texto_para_exibir

#------------------------------------------------------------------------------------
# MONTAGEM DA INTERFACE WEB
#------------------------------------------------------------------------------------

# E finalmente, a parte visual! Aqui a gente usa o `gr.Blocks` do Gradio
# para montar nossa p√°gina web, de forma bem estruturada.
with gr.Blocks(theme=gr.themes.Soft()) as interface:
    # Um t√≠tulo e uma descri√ß√£o pra deixar a p√°gina bonita e informativa.
    gr.Markdown(
        """
        # Gerador de Aut√¥matos com o Algoritmo de Thompson
        Digite uma express√£o regular, veja o passo a passo da constru√ß√£o e o aut√¥mato gerado.
        Teste palavras para ver se s√£o aceitas. Se precisar de ideias, clique no bot√£o de sugest√µes!
        """
    )

    # A gente organiza os elementos em linhas e colunas para o layout ficar legal.
    with gr.Row():
        with gr.Column(scale=1):
            # O bot√£o de sugest√£o e seus componentes de sa√≠da (√°udio e texto).
            sugestao_btn = gr.Button("üí° Me d√™ sugest√µes!")
            audio_sugestoes = gr.Audio(label="Sugest√µes por Voz", autoplay=True)
            sugestao_texto = gr.Textbox(label="Sugest√£o Escrita", lines=6)

    gr.Markdown("---") # Uma linha pra separar as se√ß√µes.

    with gr.Row():
        # A coluna da esquerda com as entradas e os resultados em texto.
        with gr.Column(scale=2):
            expressao_input = gr.Textbox(label="Express√£o Regular (ex: (a|b)*abb)")
            palavra_input = gr.Textbox(label="Palavra para Testar")
            gerar_btn = gr.Button("Gerar Aut√¥mato e Testar Palavra")
            resultado_output = gr.Textbox(label="Resultado")
            passos_output = gr.Textbox(label="Passo a Passo da Constru√ß√£o", lines=10)

        # A coluna da direita com as sa√≠das visuais e de √°udio.
        with gr.Column(scale=3):
            imagem_output = gr.Image(type="filepath", label="Aut√¥mato Finito N√£o-determin√≠stico (AFN)")
            audio_anuncio = gr.Audio(label="An√∫ncio do Gr√°fico", autoplay=True)

    # Agora a gente conecta os bot√µes com as fun√ß√µes. √â o que d√° vida √† interface!
    # Quando o bot√£o 'gerar_btn' for clicado...
    gerar_btn.click(
        fn=gerar_automato_interface, # ...execute esta fun√ß√£o...
        inputs=[expressao_input, palavra_input], # ...usando estas entradas...
        outputs=[resultado_output, imagem_output, passos_output, audio_anuncio] # ...e atualize estas sa√≠das.
    )

    # E o mesmo para o bot√£o de sugest√£o.
    sugestao_btn.click(
        fn=dar_sugestoes_por_voz,
        inputs=[],
        outputs=[audio_sugestoes, sugestao_texto]
    )

# Com tudo pronto, a gente manda o Gradio iniciar a aplica√ß√£o web.
# O 'share=True' cria um link p√∫blico tempor√°rio pra gente poder mostrar pra outras pessoas. Show!
interface.launch(share=True)
